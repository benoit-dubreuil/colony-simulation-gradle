import java.text.SimpleDateFormat
import org.ajoberstar.grgit.*

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.ajoberstar:grgit:1.7.2'
    }
}

allprojects {
    ext {
        jme['revision'] = 0
        jme['nbmRevision']  = 0
        jme['gitHash'] = ""
        jme['gitTag'] = ""
        jme['shortGitHash'] = ""
        jme['buildDate'] = new SimpleDateFormat("yyyy-MM-dd").format(new Date())
        jme['branchName'] = "unknown"
        jme['fullVersion'] = "${jme['version']}-UNKNOWN"
        jme['pomVersion'] = "unknown"
        jme['nbmUcSuffix'] = "unknown"
    }
}

def getReleaseInfo(String tag) {
    if (tag == null) {
        // not a tagged commit
        return null
    }
    if (!tag.startsWith("v")) {
        // syntax error
        return null
    }
    tag = tag.substring(1)

    String[] parts = tag.split("-", 2)
    String mainVersion
    boolean prerelease
    String releaseName = null

    if (parts.length == 2) {
        // prerelease
        prerelease = true
        mainVersion = parts[0]
        releaseName = parts[1]
        if (releaseName.size() == 0) {
            // syntax error
            return null
        }
    } else if (parts.length == 1) {
        // final release
        prerelease = false
        mainVersion = parts[0]
    } else {
        // error
        return null
    }

    if (mainVersion.size() == 0) {
        // syntax error
        return null
    }

    parts = mainVersion.split("\\.")
    if (parts.size() != 3) {
        // syntax error
        return null
    }

    String baseVersion = parts[0] + "." + parts[1]

    return [
        "tag" : tag,
        "baseVersion" : baseVersion,
        "mainVersion" : mainVersion,
        "prerelease" :  prerelease,
        "releaseName" : releaseName,
        "releaseSuffix": (prerelease ? "-${releaseName}": "")
    ]
}

task configureVersionInfo {
    try {
        def grgit = Grgit.open(jme.folder)
        def head = grgit.head()
        jme.revision = grgit.log(includes: [head]).size()
        jme.gitHash = head.id
        jme.shortGitHash = head.abbreviatedId
        jme.branchName = grgit.branch.current.name
        jme.gitTag = grgit.tag.list().find { it.commit == head }
        
        if (jme.gitTag != null) {
            jme.gitTag = jme.gitTag.name
        } else {
            jme.gitTag = System.env.TRAVIS_TAG
        }

        def releaseInfo = getReleaseInfo(jme.gitTag)
        if (releaseInfo != null) {
            jme.fullVersion = "${releaseInfo.baseVersion}${releaseInfo.releaseSuffix}"
            jme.pomVersion = "${releaseInfo.mainVersion}${releaseInfo.releaseSuffix}"
            jme.nbmRevision = "0"
            jme.nbmUcSuffix = "stable/${releaseInfo.baseVersion}/plugins"
        } else {
            // SNAPSHOT
            jme.fullVersion = jme.mainVersion
            jme.pomVersion  = jme.version
            if (System.env.TRAVIS_BRANCH != null) {
                jme.branchName = System.env.TRAVIS_BRANCH
            }
            if (System.env.TRAVIS_PULL_REQUEST != null && 
                System.env.TRAVIS_PULL_REQUEST != "false") {
                jme.branchName += "-pr-" + System.env.TRAVIS_PULL_REQUEST
            }
            if (jme.branchName != "v3.1") {
                jme.fullVersion += "-${jme.branchName}"
                jme.pomVersion += "-${jme.branchName}"
                jme.nbmUcSuffix = "${jme.branchName}-"
            } else {
                jme.nbmUcSuffix = ""
            }
            // Should be jmeMainVersion
            jme.nbmUcSuffix += "nightly/" + jme.version + "/plugins"
            jme.fullVersion += "-${jme.revision}"
            jme.pomVersion  += "-SNAPSHOT"
            jme.nbmRevision = jme.revision
        }
            
        logger.warn("Full Version: ${jme.fullVersion}")
        logger.warn("POM Version: ${jme.pomVersion}")
        logger.warn("NBM Revision: ${jme.nbmRevision}")
        logger.warn("NBM UC Suffix: ${jme.nbmUcSuffix}")
    } catch (ex) {
        // Failed to get repo info
        logger.warn("Failed to get repository info: " + ex.message + ". " + \
                    "Only partial build info will be generated.")
    }
}

ext.getJmeLocalMavenDependency = { String subprojectName ->
    return "org.jmonkeyengine:${jme.alias}-${subprojectName}:${jme.pomVersion}"
}